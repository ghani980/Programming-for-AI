# Define a function to implement DFS for the Water Jug Problem
def dfs(x, y, target, X, Y, visited):
    # If the current state is already visited, return False to avoid loops
    if (x, y) in visited:
        return False
    # Mark the current state as visited
    visited.add((x, y))
    # Print the current state of the jugs
    print(f"Jug A: {x} liters, Jug B: {y} liters")
    
    # If we reach the target, return True
    if x == target or y == target:
        print(f"Target {target} liters reached!")
        return True
    
    # List of all possible actions:
    # 1. Fill Jug A completely.
    # 2. Fill Jug B completely.
    # 3. Empty Jug A.
    # 4. Empty Jug B.
    # 5. Pour water from Jug A to Jug B.
    # 6. Pour water from Jug B to Jug A.
    
    actions = [
        (X, y),  # Fill Jug A completely
        (x, Y),  # Fill Jug B completely
        (0, y),  # Empty Jug A
        (x, 0),  # Empty Jug B
        (max(0, x - (Y - y)), min(Y, x + y)),  # Pour from Jug A to Jug B
        (min(X, x + y), max(0, y - (X - x)))   # Pour from Jug B to Jug A
    ]
    
    # Try all the possible actions recursively (DFS)
    for new_state in actions:
        new_x, new_y = new_state
        # Recursively call dfs on the next state
        if dfs(new_x, new_y, target, X, Y, visited):
            return True
    
    return False


# Function to initiate the DFS search
def water_jug_dfs(X, Y, target):
    visited = set()  # To keep track of visited states
    # Starting with both jugs empty
    if dfs(0, 0, target, X, Y, visited):
        print("Solution found!")
    else:
        print("No solution found!")

# Example: Jug capacities are 4 and 3 liters, and we want to measure 2 liters
water_jug_dfs(4, 3, 2)
